name: Build and Release APK
env:
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
on:
  push:
    tags:
      - 'v*' # 仅在推送匹配 v* 的标签时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set temporary environment variable
      run: |
        export KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
        export KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
        export KEY_ALIAS=${{ secrets.KEY_ALIAS }}
    
    # 检出代码
    - name: Checkout code
      uses: actions/checkout@v3
      
    # 设置 Python 环境并运行脚本
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  
        
    - name: Run Python script
      run: |
        pwd
        python hometv/k/en.py     

    # 设置 JDK 环境
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 缓存 Gradle 构建文件以加速
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # 赋予 gradlew 文件执行权限
    - name: Grant execute permission for Gradlew
      run: chmod +x ./gradlew
      
    # 构建 APK
    - name: Build APK
      run: ./gradlew assembleRelease

    # 上传 APK 到 GitHub Release
    - name: Upload APK to Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: app/build/outputs/apk/release/*.apk # 替换为你的APK路径
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          自动生成的 Release 版本。
